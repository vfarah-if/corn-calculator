{"version":3,"sources":["components/TripCalculator/index.js","components/TripCalculator/TripCalculator.jsx","App.js","reportWebVitals.js","index.js"],"names":["TripCalculator","initialCornQuantity","initialGeeseQuantity","useState","cornQuantity","setCornQuantity","geeseQuantity","setGeeseQuantity","message","setMessage","tripCount","setTripCount","useEffect","calculateMessage","calculateTripCount","Math","max","className","forhtml","type","id","name","value","onChange","e","Number","parseInt","target","console","log","min","parseFloat","toFixed","App","style","backgroundImage","process","backgroundPosition","backgroundSize","backgroundRepeat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAEeA,G,MCCQ,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,oBAAqBC,EAA2B,EAA3BA,qBAA2B,EAEhCC,mBAASF,GAAuB,GAFA,mBAEjEG,EAFiE,KAEnDC,EAFmD,OAG9BF,mBAASD,GAAwB,GAHH,mBAGjEI,EAHiE,KAGlDC,EAHkD,OAI1CJ,mBAAS,oBAJiC,mBAIjEK,EAJiE,KAIxDC,EAJwD,OAKtCN,mBAAS,GAL6B,mBAKjEO,EALiE,KAKtDC,EALsD,KAQxEC,qBAAU,WACRC,MAEC,CAACT,EAAcE,EAAeJ,EAAsBD,IAEvDW,qBAAU,WACRE,MAEC,CAACV,EAAcE,EAAeJ,EAAsBD,IAEvD,IAAMa,EAAqB,WACzB,OACSH,EADY,IAAjBP,GAAwC,IAAlBE,EACJF,EAAeE,EAGjCF,GAAgB,GAAKE,GAAiB,EACpB,EAGlBF,GAAgB,GAAKE,GAAiB,EACpB,EAGFS,KAAKC,IAAIZ,EAAc,GAAKW,KAAKC,IAAIV,EAAe,KAGpEO,EAAmB,WACvB,OAAqB,IAAjBT,GAAwC,IAAlBE,EACjBG,EAAW,oBAIjBL,EAAe,GAAKE,EAAgB,GACpCF,EAAe,GAAKE,EAAgB,EAE9BG,EAAW,qCAGhBH,IAAkBF,GAAgBE,GAAiB,EAC9CG,EAAW,uBAGhBH,EAAgB,EACXG,EAAW,wBAAD,OAC2B,IAAlBH,EAAsB,QAAU,UAIxDF,EAAe,EACVK,EAAW,yBAAD,OAC2B,IAAjBL,EAAqB,OAAS,eAF3D,GA+BF,OACE,iCACE,oDAEA,qCACE,sBAAKa,UAAU,cAAf,UAEE,uBAAOC,QAAQ,eAAf,4BACA,uBACEC,KAAK,SACLC,GAAG,eACHC,KAAK,WACLC,MAAOlB,EACPmB,SAhCkB,SAACC,GAC3B,IAAIF,EAAQG,OAAOC,SAASF,EAAEG,OAAOL,MAAO,KAAO,EACnDM,QAAQC,IAAI,mBAAoBP,GAC5BA,EAAQ,IACVA,EAAQ,GAEVjB,EAAgBiB,IA2BRQ,IAAK,OAGT,sBAAKb,UAAU,cAAf,UAEE,uBAAOC,QAAQ,gBAAf,6BACA,uBACEC,KAAK,SACLC,GAAG,gBACHC,KAAK,WACLC,MAAOhB,EACPiB,SAlCmB,SAACC,GAC5B,IAAIF,EAAQG,OAAOC,SAASF,EAAEG,OAAOL,MAAO,KAAO,EACnDM,QAAQC,IAAI,oBAAqBP,GAC7BA,EAAQ,IACVA,EAAQ,GAEVf,EAAiBe,IA6BTQ,IAAK,UAIX,0CArDKC,WA1DW,IA0DArB,GAAyBsB,QAAQ,MAsDjD,mBAAGf,UAAU,YAAb,SAA0BT,IAC1B,oBAAGS,UAAU,YAAb,yBAAsCP,U,MC/F7BuB,MAtBf,WACE,OACE,sBAAKhB,UAAU,MAAf,UAEE,wBACEA,UAAU,aACViB,MAAO,CACLC,gBAAgB,OAAD,OAASC,4BAAT,KACfC,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,aANtB,SASE,sDAEF,qBAAKtB,UAAU,cAAf,SACE,cAAC,EAAD,UCTOuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0016dd53.chunk.js","sourcesContent":["\nimport TripCalculator from './TripCalculator';\nexport default TripCalculator;    \n","import React, { useState, useEffect } from \"react\";\nimport \"./style/index.css\";\n\nconst TripCalculator = ({ initialCornQuantity, initialGeeseQuantity }) => {\n  // Put consts or functions or state\n  const [cornQuantity, setCornQuantity] = useState(initialCornQuantity || 0);\n  const [geeseQuantity, setGeeseQuantity] = useState(initialGeeseQuantity || 0);\n  const [message, setMessage] = useState(\"no cargo to take\");\n  const [tripCount, setTripCount] = useState(1);\n  const costPerTrip = 0.25;\n\n  useEffect(() => {\n    calculateMessage();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cornQuantity, geeseQuantity, initialGeeseQuantity, initialCornQuantity]);\n\n  useEffect(() => {\n    calculateTripCount();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cornQuantity, geeseQuantity, initialGeeseQuantity, initialCornQuantity]);\n\n  const calculateTripCount = () => {\n    if (cornQuantity === 1 && geeseQuantity === 1) {\n      return setTripCount(cornQuantity + geeseQuantity);\n    }\n\n    if (cornQuantity >= 1 && geeseQuantity >= 1) {\n      return setTripCount(0);\n    }\n\n    if (cornQuantity <= 0 && geeseQuantity <= 0) {\n      return setTripCount(1);\n    }\n    \n    return setTripCount(Math.max(cornQuantity, 0) + Math.max(geeseQuantity, 0));\n  }\n\n  const calculateMessage = () => {\n    if (cornQuantity === 0 && geeseQuantity === 0) {\n      return setMessage(`no cargo to take`);\n    }\n\n    if (\n      (cornQuantity > 1 && geeseQuantity > 0) ||\n      (cornQuantity > 0 && geeseQuantity > 1)\n    ) {\n      return setMessage(`Do not make trip, corn is at risk`);\n    }\n\n    if (geeseQuantity === cornQuantity && geeseQuantity >= 1) {\n      return setMessage(`take the corn first`);\n    }\n\n    if (geeseQuantity > 0) {\n      return setMessage(\n        `take in this order : ${geeseQuantity === 1 ? \"goose\" : \"geese\"}`\n      );\n    }\n\n    if (cornQuantity > 0) {\n      return setMessage(\n        `take in this order :  ${cornQuantity === 1 ? \"corn\" : \"corns\"}`\n      );\n    }\n  };\n\n  const calculateCostOfTrip = () => {\n    return parseFloat(tripCount * costPerTrip).toFixed(2);\n  };\n\n  // DRY\n  const cornQuantityHandler = (e) => {\n    let value = Number.parseInt(e.target.value, 10) || 0;\n    console.log(\"Quantity of corn\", value);\n    if (value < 0) {\n      value = 0;\n    }\n    setCornQuantity(value);\n  };\n\n  // DRY\n  const geeseQuantityHandler = (e) => {\n    let value = Number.parseInt(e.target.value, 10) || 0;\n    console.log(\"Quantity of geese\", value);\n    if (value < 0) {\n      value = 0;\n    }\n    setGeeseQuantity(value);\n  };\n\n  return (\n    <form>\n      <legend>Plan your trip</legend>\n      {/* TODO: Extract Trip Calculator Component */}\n      <fieldset>\n        <div className=\"input-group\">\n          {/* TODO: Extract Quantity Input Component */}\n          <label forhtml=\"cornQuantity\">Corn Quantity:</label>\n          <input\n            type=\"number\"\n            id=\"cornQuantity\"\n            name=\"quantity\"\n            value={cornQuantity}\n            onChange={cornQuantityHandler}\n            min={0}\n          />\n        </div>\n        <div className=\"input-group\">\n          {/* TODO: Extract Quantity Input Component */}\n          <label forhtml=\"geeseQuantity\">Geese Quantity:</label>\n          <input\n            type=\"number\"\n            id=\"geeseQuantity\"\n            name=\"quantity\"\n            value={geeseQuantity}\n            onChange={geeseQuantityHandler}\n            min={0}\n          />\n        </div>\n      </fieldset>\n      <label>Â£ {calculateCostOfTrip()}</label>\n      <p className=\"user-info\">{message}</p>\n      <p className=\"user-info\">Trip Count: {tripCount}</p>\n    </form>\n  );\n};\n\nexport default TripCalculator;\n","import React from \"react\";\nimport TripCalculator from \"./components/TripCalculator\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* TODO: Extract Header Component */}\n      <header\n        className=\"App-header\"\n        style={{\n          backgroundImage: `url(${process.env.PUBLIC_URL + \"/farm.jpg\"})`,\n          backgroundPosition: \"center\",\n          backgroundSize: \"cover\",\n          backgroundRepeat: \"no-repeat\",\n        }}\n      >\n        <h1>River trip adviser</h1>\n      </header>\n      <div className=\"App-content\">\n        <TripCalculator></TripCalculator>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}