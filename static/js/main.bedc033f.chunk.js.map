{"version":3,"sources":["components/QuantityInput/index.js","components/QuantityInput/QuantityInput.jsx","components/TripCalculator/index.js","components/TripCalculator/TripCalculator.jsx","components/Header/Header.jsx","components/Header/index.js","App.js","reportWebVitals.js","index.js"],"names":["QuantityInput","label","initialQuantity","onQuantityChange","useState","quantity","setQuantity","forhtml","type","name","value","onChange","e","Number","parseInt","target","console","debug","min","TripCalculator","initialCornQuantity","initialGeeseQuantity","cornQuantity","setCornQuantity","geeseQuantity","setGeeseQuantity","message","setMessage","tripCount","setTripCount","useEffect","calculateMessage","calculateTripCount","Math","max","className","parseFloat","toFixed","Header","title","imageUrl","process","style","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","prototypes","PropTypes","string","isRequired","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bedc033f.chunk.js","sourcesContent":["\nimport QuantityInput from './QuantityInput';\nexport default QuantityInput;    \n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./style/index.css\";\n\nconst QuantityInput = ({ label, initialQuantity, onQuantityChange }) => {\n  const [quantity, setQuantity] = useState(\n    initialQuantity && initialQuantity >= 0 ? initialQuantity : 0\n  );\n  const quantityChangeHandler = (e) => {\n    let value = Number.parseInt(e.target.value, 10) || 0;\n    if (value < 0) {\n      value = 0;\n    }\n    console.debug(`${label} Quantity `, value);\n    setQuantity(value);\n    onQuantityChange(value);\n  };\n\n  return (\n    <>\n      <label forhtml=\"quantity\">{label}:</label>\n      <input\n        type=\"number\"\n        name=\"quantity\"\n        value={quantity}\n        onChange={quantityChangeHandler}\n        min={0}\n      />\n    </>\n  );\n};\n\nQuantityInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  initialQuantity: PropTypes.number,\n  onQuantityChange: PropTypes.func.isRequired,\n};\n\nexport default QuantityInput;\n","\nimport TripCalculator from './TripCalculator';\nexport default TripCalculator;    \n","import React, { useState, useEffect } from \"react\";\n\nimport QuantityInput from \"../QuantityInput\";\nimport \"./style/index.css\";\n\nconst TripCalculator = ({ initialCornQuantity, initialGeeseQuantity }) => {\n  // Put consts or functions or state\n  const [cornQuantity, setCornQuantity] = useState(initialCornQuantity || 0);\n  const [geeseQuantity, setGeeseQuantity] = useState(initialGeeseQuantity || 0);\n  const [message, setMessage] = useState(\"no cargo to take\");\n  const [tripCount, setTripCount] = useState(1);\n  const costPerTrip = 0.25;\n\n  useEffect(() => {\n    calculateMessage();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cornQuantity, geeseQuantity, initialGeeseQuantity, initialCornQuantity]);\n\n  useEffect(() => {\n    calculateTripCount();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cornQuantity, geeseQuantity, initialGeeseQuantity, initialCornQuantity]);\n\n  const calculateTripCount = () => {\n    if (cornQuantity === 1 && geeseQuantity === 1) {\n      return setTripCount(cornQuantity + geeseQuantity);\n    }\n\n    if (cornQuantity >= 1 && geeseQuantity >= 1) {\n      return setTripCount(0);\n    }\n\n    if (cornQuantity <= 0 && geeseQuantity <= 0) {\n      return setTripCount(1);\n    }\n\n    return setTripCount(Math.max(cornQuantity, 0) + Math.max(geeseQuantity, 0));\n  };\n\n  const calculateMessage = () => {\n    if (cornQuantity === 0 && geeseQuantity === 0) {\n      return setMessage(`no cargo to take`);\n    }\n\n    if (\n      (cornQuantity > 1 && geeseQuantity > 0) ||\n      (cornQuantity > 0 && geeseQuantity > 1)\n    ) {\n      return setMessage(`Do not make trip, corn is at risk`);\n    }\n\n    if (geeseQuantity === cornQuantity && geeseQuantity >= 1) {\n      return setMessage(`take the corn first`);\n    }\n\n    if (geeseQuantity > 0) {\n      return setMessage(\n        `take in this order : ${geeseQuantity === 1 ? \"goose\" : \"geese\"}`\n      );\n    }\n\n    if (cornQuantity > 0) {\n      return setMessage(\n        `take in this order :  ${cornQuantity === 1 ? \"corn\" : \"corns\"}`\n      );\n    }\n  };\n\n  const calculateCostOfTrip = () => {\n    return parseFloat(tripCount * costPerTrip).toFixed(2);\n  };\n\n  const cornQuantityHandler = (value) => {\n    setCornQuantity(value);\n  };\n\n  const geeseQuantityHandler = (value) => {\n    setGeeseQuantity(value);\n  };\n\n  return (\n    <form>\n      <legend>Plan your trip</legend>\n      <fieldset>\n        <div className=\"input-group\">\n          <QuantityInput\n            label=\"Corn Quantity\"\n            initialQuantity={cornQuantity}\n            onQuantityChange={cornQuantityHandler}\n          ></QuantityInput>\n        </div>\n        <div className=\"input-group\">\n          <QuantityInput\n            label=\"Geese Quantity\"\n            initialQuantity={geeseQuantity}\n            onQuantityChange={geeseQuantityHandler}\n            \n          ></QuantityInput>\n        </div>\n      </fieldset>\n      <label>Â£ {calculateCostOfTrip()}</label>\n      <p className=\"user-info\">{message}</p>\n      <p className=\"user-info\">Trip Count: {tripCount}</p>\n    </form>\n  );\n};\n\nexport default TripCalculator;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./style/index.css\";\nconst DEFAULTURL = process.env.PUBLIC_URL + \"/farm.jpg\";\n\nconst Header = ({ title, imageUrl = DEFAULTURL }) => {\n  return (\n    <header\n      className=\"header\"\n      style={{\n        backgroundImage: `url(${imageUrl})`,\n        backgroundPosition: \"center\",\n        backgroundSize: \"cover\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n    >\n      <h1>{title}</h1>\n    </header>\n  );\n};\n\nHeader.prototypes = {\n  title: PropTypes.string.isRequired,\n  imageUrl: PropTypes.string,\n};\n\nexport default Header;\n","\nimport Header from './Header';\nexport default Header;    \n","import React from \"react\";\n\nimport TripCalculator from \"./components/TripCalculator\";\nimport Header from \"./components/Header\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header title=\"River trip adviser\"/>\n      <div className=\"App-content\">\n        <TripCalculator></TripCalculator>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}